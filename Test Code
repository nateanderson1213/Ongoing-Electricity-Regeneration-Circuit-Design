# Developer: Nate Anderson
# Project: Smart Solar Battery Predictor
# Description: Testing out different machine learning models to estimate battery charge
# levels based on solar panel voltage, current, and time of day.
# Goal: figure out which model (linear regression vs random forest) does a better job
# at predicting how the battery will charge.

# =============================
# 1. Imports
# =============================
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# =============================
# 2. Dataset (mocked-up for now)
# =============================
# These are test numbers to simulate how the battery might behave.
# Later I plan to replace this with real data from my ESP32 logger.

data = {
"voltage": [5.2, 4.9, 5.5, 6.0, 5.8, 5.1, 4.7, 6.2, 5.4, 5.9],
"current": [180, 150, 200, 220, 210, 170, 140, 230, 190, 205],
"time_of_day": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
"battery_level": [20, 25, 35, 50, 60, 65, 70, 85, 90, 95]
}

df = pd.DataFrame(data)
print("Preview of the dataset:")
print(df.head())

# =============================
# 3. Train/Test Split
# =============================
# Inputs: voltage, current, and time of day
# Output: battery level (%)

X = df[["voltage", "current", "time_of_day"]]
y = df["battery_level"]

X_train, X_test, y_train, y_test = train_test_split(
X, y, test_size=0.2, random_state=42
)

# =============================
# 4. Linear Regression Model
# =============================
lin_model = LinearRegression()
lin_model.fit(X_train, y_train)
lin_pred = lin_model.predict(X_test)

lin_mse = mean_squared_error(y_test, lin_pred)
lin_r2 = r2_score(y_test, lin_pred)

print("\nLinear Regression Results:")
print(f" Mean Squared Error: {lin_mse:.2f}")
print(f" R² Score: {lin_r2:.2f}")

# =============================
# 5. Random Forest Model
# =============================
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

rf_mse = mean_squared_error(y_test, rf_pred)
rf_r2 = r2_score(y_test, rf_pred)

print("\nRandom Forest Results:")
print(f" Mean Squared Error: {rf_mse:.2f}")
print(f" R² Score: {rf_r2:.2f}")

# =============================
# 6. Visual Comparison
# =============================
plt.figure(figsize=(6,6))
plt.scatter(y_test, lin_pred, label="Linear Regression", color="blue")
plt.scatter(y_test, rf_pred, label="Random Forest", color="green")
plt.plot([0,100], [0,100], "--", color="red")
plt.xlabel("Actual Battery Level (%)")
plt.ylabel("Predicted Battery Level (%)")
plt.title("Battery Prediction: Linear vs Random Forest")
plt.legend()
plt.show()

# =============================
# 7. Example Prediction
# =============================
example_input = np.array([[5.5, 200, 13]]) # Example: 1PM, 5.5V, 200mA
lin_example = lin_model.predict(example_input)[0]
rf_example = rf_model.predict(example_input)[0]

print(f"\nExample Prediction (1PM, 5.5V, 200mA):")
print(f" Linear Regression says: {lin_example:.2f}% battery")
print(f" Random Forest says: {rf_example:.2f}% battery")
